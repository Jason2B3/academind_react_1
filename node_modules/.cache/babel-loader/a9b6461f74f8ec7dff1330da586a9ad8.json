{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Desktop\\\\acad_react\\\\src\\\\components\\\\Expenses\\\\ExpensesList.js\";\nimport './ExpensesList.css';\nimport ExpenseItem from \"./ExpenseItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpensesList(props) {\n  //% Filter the expenses object based on the filter choice\n  const filteredExpenses = props.expenseObj.filter(obj => {\n    // \"Any\" => no filter\n    if (props.filteredYear === \"Any\") return obj; // Year selected => filter according to it\n\n    return obj.date.getFullYear().toString() === props.filteredYear;\n  }); //% Return a different JSX depending on whether filteredExpenses is empty or not\n  // If empty:\n\n  if (filteredExpenses.length === 0) return /*#__PURE__*/_jsxDEV(\"h2\", {\n    children: \"Found no expenses\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 42\n  }, this); // If not empty:\n\n  let conditionalJSX = /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: 'white'\n    },\n    children: \"No expenses found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 24\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n      defaultYear: filteredYear,\n      onSelectFilterYear: filterYearHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), filteredExpenses.map(obj => /*#__PURE__*/_jsxDEV(ExpenseItem, {\n      title: obj.title,\n      amount: obj.amount,\n      date: obj.date\n    }, obj.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ExpensesList;\nexport default ExpensesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpensesList\");","map":{"version":3,"sources":["C:/Users/jason/Desktop/acad_react/src/components/Expenses/ExpensesList.js"],"names":["ExpenseItem","ExpensesList","props","filteredExpenses","expenseObj","filter","obj","filteredYear","date","getFullYear","toString","length","conditionalJSX","color","filterYearHandler","map","title","amount","id"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,WAAP,MAAwB,eAAxB;;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AACzB;AACA,QAAMC,gBAAgB,GAAGD,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAyBC,GAAD,IAAS;AACzD;AACA,QAAIJ,KAAK,CAACK,YAAN,KAAuB,KAA3B,EAAkC,OAAOD,GAAP,CAFuB,CAGzD;;AACA,WAAOA,GAAG,CAACE,IAAJ,CAASC,WAAT,GAAuBC,QAAvB,OAAsCR,KAAK,CAACK,YAAnD;AACD,GALyB,CAAzB,CAFyB,CAS1B;AACA;;AACA,MAAGJ,gBAAgB,CAACQ,MAAjB,KAA0B,CAA7B,EAAgC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CAXN,CAY1B;;AACA,MAAIC,cAAc,gBAAG;AAAG,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAArB;;AACA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE,QAAC,cAAD;AACE,MAAA,WAAW,EAAEN,YADf;AAEE,MAAA,kBAAkB,EAAEO;AAFtB;AAAA;AAAA;AAAA;AAAA,YADF,EAKGX,gBAAgB,CAACY,GAAjB,CAAsBT,GAAD,iBACpB,QAAC,WAAD;AAEE,MAAA,KAAK,EAAEA,GAAG,CAACU,KAFb;AAGE,MAAA,MAAM,EAAEV,GAAG,CAACW,MAHd;AAIE,MAAA,IAAI,EAAEX,GAAG,CAACE;AAJZ,OACOF,GAAG,CAACY,EADX;AAAA;AAAA;AAAA;AAAA,YADD,CALH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KA9BQjB,Y;AA+BT,eAAeA,YAAf","sourcesContent":["import './ExpensesList.css' \r\nimport ExpenseItem from \"./ExpenseItem\";\r\n\r\n\r\nfunction ExpensesList(props){\r\n   //% Filter the expenses object based on the filter choice\r\n   const filteredExpenses = props.expenseObj.filter((obj) => {\r\n    // \"Any\" => no filter\r\n    if (props.filteredYear === \"Any\") return obj;\r\n    // Year selected => filter according to it\r\n    return obj.date.getFullYear().toString() === props.filteredYear;\r\n  });\r\n\r\n  //% Return a different JSX depending on whether filteredExpenses is empty or not\r\n  // If empty:\r\n  if(filteredExpenses.length===0) return <h2>Found no expenses</h2>\r\n  // If not empty:\r\n  let conditionalJSX = <p style={{ color: 'white' }}>No expenses found</p>;\r\n  return (\r\n    <Card className=\"expenses\">\r\n      <ExpensesFilter\r\n        defaultYear={filteredYear}\r\n        onSelectFilterYear={filterYearHandler}\r\n      />\r\n      {filteredExpenses.map((obj) => (\r\n        <ExpenseItem\r\n          key={obj.id}\r\n          title={obj.title}\r\n          amount={obj.amount}\r\n          date={obj.date}\r\n        />\r\n      ))}\r\n    </Card>\r\n  );\r\n}\r\nexport default ExpensesList"]},"metadata":{},"sourceType":"module"}