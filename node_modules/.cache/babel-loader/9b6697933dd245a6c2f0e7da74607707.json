{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Desktop\\\\acad_react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport LeanExpenses from \"./components/Expenses/LeanExpenses\";\nimport ExpenseForm from \"./components/NewExpense/ExpenseForm\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const expenses = [{\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14)\n  }, {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12)\n  }, {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28)\n  }, {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12)\n  }]; // Set up state for the data brought from ExpenseForm.js -> LeanExpenses.js\n\n  const [movedExpenseData, setMovedExpenseData] = useState(\"\"); //# DataUp STEP 2: Create a handler function to set your new attribute equal to\n\n  const saveExpenseDataHandler = function (savedFormData) {\n    const expenseData = { ...savedFormData,\n      // save the data already present in the parameter\n      id: Math.random().toString() // add a unique ID\n      // the parameter will equal the object of data that's collected in ExpenseForm.js\n\n    };\n    console.log(\"data moved to App.js!\", expenseData);\n    setMovedExpenseData(expenseData);\n  }; //# DataUp STEP 1: Create a custom attribute where your CCM tags are used\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LeanExpenses, {\n      expenses: expenses,\n      passedFormData: movedExpenseData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"87esrUHVW0zrhLTYgbog4Jezdz4=\");\n\n_c = App;\nexport default App; //~ EXPLANATION\n// ExpenseForm.js gathers data about the info in the form fields, after we hit submit\n// props.onSaveExpenseData(expenseData)\n// We pass it up to App.js\n// onSaveExpenseData={saveExpenseDataHandler}\n// We pass it down to LeanExpense.js\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jason/Desktop/acad_react/src/App.js"],"names":["LeanExpenses","ExpenseForm","React","useState","App","expenses","id","title","amount","date","Date","movedExpenseData","setMovedExpenseData","saveExpenseDataHandler","savedFormData","expenseData","Math","random","toString","console","log"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,oCAAzB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,QAAQ,GAAG,CACf;AACEC,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,cAFT;AAGEC,IAAAA,MAAM,EAAE,KAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GADe,EAOf;AAAEJ,IAAAA,EAAE,EAAE,IAAN;AAAYC,IAAAA,KAAK,EAAE,QAAnB;AAA6BC,IAAAA,MAAM,EAAE,MAArC;AAA6CC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAAnD,GAPe,EAQf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,eAFT;AAGEC,IAAAA,MAAM,EAAE,MAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GARe,EAcf;AACEJ,IAAAA,EAAE,EAAE,IADN;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,MAAM,EAAE,GAHV;AAIEC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,GAde,CAAjB,CADa,CAsBb;;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CAAC,EAAD,CAAxD,CAvBa,CAwBb;;AACA,QAAMU,sBAAsB,GAAG,UAAUC,aAAV,EAAyB;AACtD,UAAMC,WAAW,GAAG,EAClB,GAAGD,aADe;AACA;AAClBR,MAAAA,EAAE,EAAEU,IAAI,CAACC,MAAL,GAAcC,QAAd,EAFc,CAEY;AAC9B;;AAHkB,KAApB;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCL,WAArC;AACAH,IAAAA,mBAAmB,CAACG,WAAD,CAAnB;AACD,GARD,CAzBa,CAkCb;;;AACA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,iBAAiB,EAAEF;AAAhC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAER,QAAxB;AAAkC,MAAA,cAAc,EAAEM;AAAlD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAzCQP,G;;KAAAA,G;AA0CT,eAAeA,GAAf,C,CAEA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import LeanExpenses from \"./components/Expenses/LeanExpenses\";\nimport ExpenseForm from \"./components/NewExpense/ExpenseForm\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const expenses = [\n    {\n      id: \"e1\",\n      title: \"Toilet Paper\",\n      amount: 94.12,\n      date: new Date(2020, 7, 14),\n    },\n    { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\n    {\n      id: \"e3\",\n      title: \"Car Insurance\",\n      amount: 294.67,\n      date: new Date(2021, 2, 28),\n    },\n    {\n      id: \"e4\",\n      title: \"New Desk (Wooden)\",\n      amount: 450,\n      date: new Date(2021, 5, 12),\n    },\n  ];\n  // Set up state for the data brought from ExpenseForm.js -> LeanExpenses.js\n  const [movedExpenseData, setMovedExpenseData] = useState(\"\");\n  //# DataUp STEP 2: Create a handler function to set your new attribute equal to\n  const saveExpenseDataHandler = function (savedFormData) {\n    const expenseData = {\n      ...savedFormData, // save the data already present in the parameter\n      id: Math.random().toString(), // add a unique ID\n      // the parameter will equal the object of data that's collected in ExpenseForm.js\n    };\n    console.log(\"data moved to App.js!\", expenseData);\n    setMovedExpenseData(expenseData);\n  };\n  //# DataUp STEP 1: Create a custom attribute where your CCM tags are used\n  return (\n    <div>\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\n      <LeanExpenses expenses={expenses} passedFormData={movedExpenseData} />\n    </div>\n  );\n}\nexport default App;\n\n//~ EXPLANATION\n// ExpenseForm.js gathers data about the info in the form fields, after we hit submit\n// props.onSaveExpenseData(expenseData)\n\n// We pass it up to App.js\n// onSaveExpenseData={saveExpenseDataHandler}\n\n// We pass it down to LeanExpense.js"]},"metadata":{},"sourceType":"module"}